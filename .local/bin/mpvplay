#!/bin/sh

MOUNT_SCRIPT="${XDG_SCRIPTS_HOME:-${HOME}/.local/bin}/ecrypt"

check_mount() {
    mount | grep -q " $HOME/Private " && mount | grep -q " /mnt/extra/videos " || $MOUNT_SCRIPT
}

check_unmount() {
    if lsof +D "$HOME/Private" || lsof +D "/mnt/extra/videos"; then
        return
    else
        mount | grep -q " $HOME/Private " && mount | grep -q " /mnt/extra/videos " && $MOUNT_SCRIPT
    fi
}

play_url() {
	url=$(xclip -selection clipboard -o)
    echo "$url" | grep -E '^https?://' > /dev/null || return 1
	notify-send "📽️ Playing video from URL:" "$url"
	play_media "$url"
}

play_media() {
    mpv "$@" && check_unmount || exit
}

play_playlist() {
	playlist_name=$1
	mpv --playlist="$HOME/.config/mpv/playlists/$playlist_name.m3u"
}

list_and_play() {
	directory=$1
	CHOICE=$(printf "List files\nEnter filenames" | dmenu -i -p "Choose an option:")
	case "$CHOICE" in
        "Enter filenames")
            search_term=$(echo | dmenu -i -p "File names:")
            [ -z "$search_term" ] && return
            files=$(find "$directory" -type f \( -iname "*.mp4" -o -iname "*.mkv" -o -iname "*.mov" -o -iname "*.flv" -o -iname "*.wmv" -o -iname "*.webm" -o -iname "*.mpeg" -o -iname "*.mpg" \) -iname "*$search_term*")
            [ -z "$files" ] && return
            TMP_PLAYLIST=$(mktemp /tmp/mpv_playlist.XXXXXX)
            echo "$files" | while read -r file; do
                echo "$file"
            done >"$TMP_PLAYLIST"
            cat "$TMP_PLAYLIST" # For debugging: output the contents of the playlist to verify.
            play_media --playlist="$TMP_PLAYLIST"
            rm -f "$TMP_PLAYLIST"
            ;;
        "List files")
            files_with_paths=$(find "$directory" -mindepth 1 -maxdepth 1 -type f \( -iname "*.mp4" -o -iname "*.mkv" -o -iname "*.webm" -o -iname "*.avi" -o -iname "*.flv" -o -iname "*.wmv" -o -iname "*.ts" \) | sort)
            SELECTED_FILE=$(printf "All files\n%s" "$files_with_paths" | sed 's!.*/!!' | dmenu -i -l 21 -p "Select a file:")
            [ -z "$SELECTED_FILE" ] && exit 1
            [ "$SELECTED_FILE" = "All files" ] && play_media "$directory/" && return
            FULL_PATH="$(echo "$files_with_paths" | grep -F "$SELECTED_FILE")"
            [ -f "$FULL_PATH" ] && play_media "$FULL_PATH" && return
            ;;
        *) return ;;
	esac
}

CONTENT_CHOICE=$(printf "URL\nLocal Files\nPlaylist" | dmenu -i -p "Choose media source:")
case "$CONTENT_CHOICE" in
"URL") play_url ;;
"Playlist")
    PLAYLISTS=$(find "$HOME/.config/mpv/playlists" -maxdepth 1 -type f -name "*.m3u" -exec basename {} .m3u \; | dmenu -i -p "Select a playlist:")
	[ -z "$PLAYLISTS" ] && exit
	play_playlist "$PLAYLISTS"
	;;
"Local Files")
	check_mount
    printf "%s\n%s\n%s\n%s\n%s\n%s\n" "$HOME/Downloads" "$HOME/Private" "$HOME/Torrents/complete" "$HOME/Videos" "/media" "/mnt/extra" | dmenu -i -p "Choose your initial directory:" | {
		read -r initial_directory
		[ -z "$initial_directory" ] && exit
		SELECTED_FOLDER="$initial_directory"
		while true; do
			SUBFOLDER_OPTIONS="$(find "$SELECTED_FOLDER" -mindepth 1 -maxdepth 1 -type d ! -name ".*" -printf "%P\n" | sort)"
			[ -z "$SUBFOLDER_OPTIONS" ] && list_and_play "$SELECTED_FOLDER" && break
			OPTIONS="All files\n$SUBFOLDER_OPTIONS"
            SELECTED_RELATIVE_FOLDER="$(printf "%b" "$OPTIONS" | dmenu -i -p "Select a folder or 'All files':")"
			[ -z "$SELECTED_RELATIVE_FOLDER" ] && exit
			[ "$SELECTED_RELATIVE_FOLDER" = "All files" ] && list_and_play "$SELECTED_FOLDER" && break
			SELECTED_FOLDER="$SELECTED_FOLDER/$SELECTED_RELATIVE_FOLDER"
		done
	}
	;;
*) exit ;;
esac

trap 'check_unmount; exit' EXIT INT
