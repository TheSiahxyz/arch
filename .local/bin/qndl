#!/bin/sh

# Process command-line options for download type
while getopts "mv" opt; do
	case $opt in
	m)
		DOWNLOAD_TYPE="music"
		OUTPUT_DIR="${XDG_MUSIC_DIR:-$HOME/Music}"
		ARCHIVE_FILE="${OUTPUT_DIR}/.music.txt"
		;;
	v)
		DOWNLOAD_TYPE="video"
		OUTPUT_DIR="${XDG_VIDEOS_DIR:-$HOME/Videos}/Youtube"
		;;
	*)
		notify-send "‚õî Invalid option: -$OPTARG"
		exit 1
		;;
	esac
done

shift $((OPTIND - 1))

# Use the first non-option argument as the URL if provided, else from clipboard
if [ -n "$1" ]; then
	URL="$1"
else
	URL=$(xclip -selection clipboard -o)
fi

if [ -z "$URL" ]; then
	notify-send "‚õî No URL provided and clipboard is empty or does not contain a valid URL."
	exit 1
fi

YTDL_CMD_BASE="yt-dlp --continue --embed-metadata --ignore-errors --no-force-overwrites --verbose"
SIMULATION_CMD="yt-dlp --simulate --print filename"

if [ "$DOWNLOAD_TYPE" = "music" ]; then
	YTDL_OUTPUT_FORMAT="${OUTPUT_DIR}/%(artist)s - %(title)s.%(ext)s"
    YTDL_CMD_BASE="$YTDL_CMD_BASE --audio-format best --audio-quality 0 --download-archive \"$ARCHIVE_FILE\" --extract-audio"
elif [ "$DOWNLOAD_TYPE" = "video" ]; then
	YTDL_OUTPUT_FORMAT="${OUTPUT_DIR}/%(title)s [%(id)s].%(ext)s"
    YTDL_CMD_BASE="$YTDL_CMD_BASE --buffer-size 1M --embed-thumbnail --format bestvideo+bestaudio/best --no-sponsorblock"
else
	notify-send "‚õî Failed unknown type: $DOWNLOAD_TYPE" "$SIMULATION_CMD"
	exit 1
fi

# Initial assumption: playlist is not intended
YTDL_CMD_BASE="$YTDL_CMD_BASE --no-playlist"

if echo "$URL" | grep -q "playlist\|list="; then
	PL_DOWNLOAD_CHOICE=$(echo -e "playlist\nvideo" | dmenu -i -p "Download entire playlist or just this video?")
	if [ "$PL_DOWNLOAD_CHOICE" == "playlist" ]; then
		notify-send -t 5000 "‚è≥ Reading $URL to download..."
		YTDL_CMD_BASE=${YTDL_CMD_BASE/--no-playlist/}
		YTDL_CMD_BASE="$YTDL_CMD_BASE --yes-playlist"
    fi

	if [ "$DOWNLOAD_TYPE" == "video" ]; then
        SUBDIR=$(echo "$URL" | sed 's|https://www.youtube.com/watch?v=||g')
        mkdir -p "${OUTPUT_DIR}/${SUBDIR}"
		YTDL_OUTPUT_FORMAT="${OUTPUT_DIR}/${SUBDIR}/%(playlist_index)s_%(title)s [%(id)s].%(ext)s"
	fi
fi

SIMULATION_CMD="$SIMULATION_CMD $URL"
YTDL_CMD="$YTDL_CMD_BASE --output \"$YTDL_OUTPUT_FORMAT\" \"$URL\""

# Notify and perform simulation to get filename (feedback to user)
echo "$SIMULATION_CMD" | while IFS= read -r line; do
	filename=$(basename "$line")
	notify-send "üì• Queuing $DOWNLOAD_TYPE to download:" "$filename"
done

# Enqueue the download task with tsp
FILENAME=$($SIMULATION_CMD 2>/dev/null)
notify-send "‚è≥ Downloading $DOWNLOAD_TYPE:" "$FILENAME"
idnum=$(tsp bash -c "$YTDL_CMD")
pkill -RTMIN+26 "${STATUSBAR:-dwmblocks}"

# Notify upon completion
tsp -D $idnum notify-send "‚úÖ $DOWNLOAD_TYPE download complete:" "$URL"

# Conditionally update the music database if the download type is music
if [ "$DOWNLOAD_TYPE" = "music" ]; then
	tsp -D $idnum bash -c "mpc update"
fi
